// abstracts/_functions.scss

@use "sass:map";
@use "sass:color";
@use "variables" as *;

// Función genérica para obtener valores de un mapa
@function get-value-from-map($map, $key) {
  @if map.has-key($map, $key) {
    @return map.get($map, $key);
  } @else {
    @error "La clave `#{$key}` no existe en el mapa proporcionado.";
  }
}

// Función para obtener un tamaño de fuente
@function get-font-size($size-name) {
  @return get-value-from-map($font-sizes, $size-name);
}

// Función para obtener una altura de línea
@function get-line-height($size-name) {
  @return get-value-from-map($line-heights, $size-name);
}

// Función para obtener un breakpoint
@function get-breakpoint($size-name) {
  @return get-value-from-map($breakpoints, $size-name);
}

// Función para obtener un espaciado
@function get-spacing($size-name) {
  @return get-value-from-map($spacing, $size-name);
}

// Función para obtener un color
@function get-color($color-name) {
  @return get-value-from-map($colors, $color-name);
}

// Función para obtener un color de fondo
@function get-background($background-name) {
  @return get-value-from-map($backgrounds, $background-name);
}

// Función para convertir colores a HSL
@function to-hsl($color) {
  @return hsl(
    color.channel($color, "hue", $space: hsl),
    color.channel($color, "saturation", $space: hsl),
    color.channel($color, "lightness", $space: hsl)
  );
}

// Función para convertir colores a HSLA con transparencia
@function to-hsla($color, $alpha) {
  @return hsla(
    color.channel($color, "hue", $space: hsl),
    color.channel($color, "saturation", $space: hsl),
    color.channel($color, "lightness", $space: hsl),
    $alpha
  );
}
