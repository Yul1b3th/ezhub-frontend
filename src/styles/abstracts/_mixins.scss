// abstracts/_mixins.scss

@use "sass:map";
@use "variables" as vars;

// Mixin para aplicar tamaño de fuente
@mixin apply-font-size($size-name) {
  @if map.has-key(vars.$font-sizes, $size-name) {
    font-size: map.get(vars.$font-sizes, $size-name);
  } @else {
    @error "El tamaño de fuente `#{$size-name}` no está definido en `$font-sizes`.";
  }
}

// Mixin para márgenes utilizando espaciado predefinido
@mixin apply-spacing($size-name) {
  @if map.has-key(vars.$spacing, $size-name) {
    margin: map.get(vars.$spacing, $size-name);
  } @else {
    @error "El espaciado `#{$size-name}` no está definido en `$spacing`.";
  }
}

// Mixin para truncar líneas de texto con "line-clamp"
@mixin apply-line-clamp($lines) {
  @if $lines > 0 {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $lines;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    @error "El mixin `apply-line-clamp` requiere un número mayor a 0 para `$lines`.";
  }
}

// Mixin genérico para media queries
@mixin media-query($feature, $value) {
  @if $feature != null and $value != null {
    @media (#{$feature}: #{$value}) {
      @content;
    }
  } @else {
    @error "El mixin `media-query` requiere tanto `$feature` como `$value`.";
  }
}

// Mixin para contenedor
@mixin container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 15px;
  width: 100%;
}

// Mixin para tamaño de fuente responsive
@mixin apply-font-size-responsive($min-size, $max-size) {
  @media (min-width: 600px) {
    font-size: $min-size;
  }
  @media (min-width: 1200px) {
    font-size: $max-size;
  }
}
